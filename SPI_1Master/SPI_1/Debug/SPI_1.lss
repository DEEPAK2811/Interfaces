
SPI_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001cc  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ae  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	11 c0       	rjmp	.+34     	; 0x58 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
    //Defining Output
	DDRB = (1<<MOSI) | (1<<SCK) | (1<<SS) ; 
  38:	8c e2       	ldi	r24, 0x2C	; 44
  3a:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRD = 0xFF ;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	81 bb       	out	0x11, r24	; 17
  40:	84 bb       	out	0x14, r24	; 20
	
	//SPI Control Registers : SPI_enable , master select , data rate select
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  42:	81 e5       	ldi	r24, 0x51	; 81
  44:	8d b9       	out	0x0d, r24	; 13
	
	PORTC = SPDR = 0x01 ; // WRITE 1
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	8f b9       	out	0x0f, r24	; 15
  4a:	85 bb       	out	0x15, r24	; 21
	while((SPSR && (1<<SPIF)) == 0); //Checking SPIF flag
  4c:	8e b1       	in	r24, 0x0e	; 14
  4e:	88 23       	and	r24, r24
  50:	e9 f3       	breq	.-6      	; 0x4c <__SREG__+0xd>
	PORTD = SPDR ; //PRINTING RECEIVED DATA ON PARTD
  52:	8f b1       	in	r24, 0x0f	; 15
  54:	82 bb       	out	0x12, r24	; 18
  56:	ff cf       	rjmp	.-2      	; 0x56 <__SREG__+0x17>

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
