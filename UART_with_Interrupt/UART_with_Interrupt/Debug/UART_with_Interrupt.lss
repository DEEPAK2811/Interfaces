
UART_with_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800060  00800060  00000142  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e1  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000206  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	27 c0       	rjmp	.+78     	; 0x66 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 39       	cpi	r26, 0x95	; 149
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	0d d0       	rcall	.+26     	; 0x5e <main>
  44:	42 c0       	rjmp	.+132    	; 0xca <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <UART_init>:
	{
		*(buffer++) = UART_ReceiveChar();
	} while (*(buffer-1)!= '\r');  //Enter or carriage return
	*buffer = '\0';
	return p;
	}
  48:	82 e0       	ldi	r24, 0x02	; 2
  4a:	8b b9       	out	0x0b, r24	; 11
  4c:	8f e1       	ldi	r24, 0x1F	; 31
  4e:	8a b9       	out	0x0a, r24	; 10
  50:	86 e8       	ldi	r24, 0x86	; 134
  52:	80 bd       	out	0x20, r24	; 32
  54:	78 94       	sei
  56:	8c e0       	ldi	r24, 0x0C	; 12
  58:	89 b9       	out	0x09, r24	; 9
  5a:	10 bc       	out	0x20, r1	; 32
  5c:	08 95       	ret

0000005e <main>:
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
  62:	f2 df       	rcall	.-28     	; 0x48 <UART_init>
  64:	ff cf       	rjmp	.-2      	; 0x64 <main+0x6>

00000066 <__vector_11>:

ISR(USART_RXC_vect)  //ISR for receiver
 {
  66:	1f 92       	push	r1
  68:	0f 92       	push	r0
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	0f 92       	push	r0
  6e:	11 24       	eor	r1, r1
  70:	2f 93       	push	r18
  72:	8f 93       	push	r24
  74:	9f 93       	push	r25
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
	
	received = UDR;
  7a:	2c b1       	in	r18, 0x0c	; 12
  7c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	if(received == '\r') //if enter is received
  80:	2d 30       	cpi	r18, 0x0D	; 13
  82:	61 f4       	brne	.+24     	; 0x9c <__vector_11+0x36>
	{ 
		msg[count_char] = '\0';
  84:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <count_char>
  88:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <count_char+0x1>
  8c:	ef 59       	subi	r30, 0x9F	; 159
  8e:	ff 4f       	sbci	r31, 0xFF	; 255
  90:	10 82       	st	Z, r1
		count_char=0;	
  92:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <count_char+0x1>
  96:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <count_char>
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <__vector_11+0x50>
	}
	else{
		msg[count_char] = received ;
  9c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <count_char>
  a0:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <count_char+0x1>
  a4:	fc 01       	movw	r30, r24
  a6:	ef 59       	subi	r30, 0x9F	; 159
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	20 83       	st	Z, r18
		count_char++;
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <count_char+0x1>
  b2:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <count_char>
	}
			}
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
