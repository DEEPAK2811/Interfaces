
I2C_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	28 d0       	rcall	.+80     	; 0x84 <main>
  34:	54 c0       	rjmp	.+168    	; 0xde <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <TWI_Init>:
	while((TWSR & (0xF8)) != 0x28);    // Check for the acknowledgment (Data written)
	PORTB = 0x01;
}
void TWI_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // Clear TWI interrupt flag, Enable TWI, Put stop condition on SDA
  38:	10 b8       	out	0x00, r1	; 0
  3a:	8c e0       	ldi	r24, 0x0C	; 12
  3c:	80 b9       	out	0x00, r24	; 0
  3e:	08 95       	ret

00000040 <TWI_Start>:
  40:	84 ea       	ldi	r24, 0xA4	; 164
  42:	86 bf       	out	0x36, r24	; 54
  44:	06 b6       	in	r0, 0x36	; 54
  46:	07 fe       	sbrs	r0, 7
  48:	fd cf       	rjmp	.-6      	; 0x44 <TWI_Start+0x4>
  4a:	81 b1       	in	r24, 0x01	; 1
  4c:	88 7f       	andi	r24, 0xF8	; 248
  4e:	88 30       	cpi	r24, 0x08	; 8
  50:	e1 f7       	brne	.-8      	; 0x4a <TWI_Start+0xa>
  52:	08 95       	ret

00000054 <TWI_Write_Addr>:
  54:	83 b9       	out	0x03, r24	; 3
  56:	84 e8       	ldi	r24, 0x84	; 132
  58:	86 bf       	out	0x36, r24	; 54
  5a:	06 b6       	in	r0, 0x36	; 54
  5c:	07 fe       	sbrs	r0, 7
  5e:	fd cf       	rjmp	.-6      	; 0x5a <TWI_Write_Addr+0x6>
  60:	81 b1       	in	r24, 0x01	; 1
  62:	88 7f       	andi	r24, 0xF8	; 248
  64:	88 31       	cpi	r24, 0x18	; 24
  66:	e1 f7       	brne	.-8      	; 0x60 <TWI_Write_Addr+0xc>
  68:	08 95       	ret

0000006a <TWI_Write_Data>:
  6a:	83 b9       	out	0x03, r24	; 3
  6c:	84 e8       	ldi	r24, 0x84	; 132
  6e:	86 bf       	out	0x36, r24	; 54
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <TWI_Write_Data+0x6>
  76:	81 b1       	in	r24, 0x01	; 1
  78:	88 7f       	andi	r24, 0xF8	; 248
  7a:	88 32       	cpi	r24, 0x28	; 40
  7c:	e1 f7       	brne	.-8      	; 0x76 <TWI_Write_Data+0xc>
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <main>:
}


int main(void)
{
    TWI_Init();
  84:	d9 df       	rcall	.-78     	; 0x38 <TWI_Init>
	while((TWSR & (0xF8)) != 0x28);    // Check for the acknowledgment (Data written)
	PORTB = 0x01;
}
void TWI_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // Clear TWI interrupt flag, Enable TWI, Put stop condition on SDA
  86:	c4 e9       	ldi	r28, 0x94	; 148
{
    TWI_Init();
	
    while (1) 
    {
		TWI_Start();
  88:	db df       	rcall	.-74     	; 0x40 <TWI_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	89 e6       	ldi	r24, 0x69	; 105
  8e:	98 e1       	ldi	r25, 0x18	; 24
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0xc>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x16>
  9a:	00 00       	nop
		_delay_ms(1000);
		TWI_Write_Addr(0x20);
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	da df       	rcall	.-76     	; 0x54 <TWI_Write_Addr>
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	89 e6       	ldi	r24, 0x69	; 105
  a4:	98 e1       	ldi	r25, 0x18	; 24
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x22>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2c>
  b0:	00 00       	nop
		_delay_ms(1000);
		TWI_Write_Data('D');
  b2:	84 e4       	ldi	r24, 0x44	; 68
  b4:	da df       	rcall	.-76     	; 0x6a <TWI_Write_Data>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x38>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x42>
  c6:	00 00       	nop
	while((TWSR & (0xF8)) != 0x28);    // Check for the acknowledgment (Data written)
	PORTB = 0x01;
}
void TWI_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // Clear TWI interrupt flag, Enable TWI, Put stop condition on SDA
  c8:	c6 bf       	out	0x36, r28	; 54
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	89 e6       	ldi	r24, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x4c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x56>
  da:	00 00       	nop
  dc:	d5 cf       	rjmp	.-86     	; 0x88 <main+0x4>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
